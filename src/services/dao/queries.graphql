query DAO($id: String!) {
  dao(id: $id) {
    datum {
      id
      number
      name
      desc
      logo
      ownerId
      createAt
      updateAt
      tokenAddress
      tokenName
      tokenSymbol
    }
    following {
      total
    }
  }
}

query DAOJobConfig($daoId: String!) {
  daoJobConfig(daoId: $daoId) {
    datum {
      id
      daoId
      createAt
      deadlineDay
      deadlineTime
      pairBeginDay
      pairBeginHour
      pairEndDay
      pairEndHour
      timeZone
      timeZoneRegion
      updateAt
      votingBeginDay
      votingBeginHour
      votingEndDay
      votingEndHour
    }
    existedLastCycle {
      timeZone
      beginAt
      endAt
      pairBeginAt
      pairEndAt
      voteBeginAt
      voteEndAt
    }
    getNextCycle {
      timeZone
      beginAt
      endAt
      pairBeginAt
      pairEndAt
      voteBeginAt
      voteEndAt
    }
  }
}

query DAOJobConfigPreviewNextCycle($daoId: String!, $timeZone: Int, $deadlineDay: Int, $deadlineTime: Int, $pairBeginDay: Int, $pairBeginHour: Int, $pairEndDay: Int, $pairEndHour: Int, $votingBeginDay: Int, $votingBeginHour: Int, $votingEndDay: Int, $votingEndHour: Int) {
  daoJobConfig(daoId: $daoId) {
    previewNextCycle(timeZone: $timeZone, deadlineDay: $deadlineDay, deadlineTime: $deadlineTime, pairBeginDay: $pairBeginDay, pairBeginHour: $pairBeginHour, pairEndDay: $pairEndDay, pairEndHour: $pairEndHour, votingBeginDay: $votingBeginDay, votingBeginHour: $votingBeginHour, votingEndDay: $votingEndDay, votingEndHour: $votingEndHour) {
      timeZone
      beginAt
      endAt
      pairBeginAt
      pairEndAt
      voteBeginAt
      voteEndAt
    }
  }
}

query DAOHomeWithLoginQuery($id: String!, $userId: String!) {
  dao(id: $id) {
    datum {
      id
      number
      name
      desc
      logo
      ownerId
      createAt
      updateAt
      tokenAddress
      tokenName
      tokenSymbol
    }
    cycles(filter: [un_vote_end]) {
      nodes {
        datum {
          id
          beginAt
          endAt
          voteBeginAt
          voteEndAt
        }
        votes(isMyself: true) {
          total
        }
      }
    }
    following {
      total
      followers(userId: $userId) {
        createAt
      }
    }
  }
}

query DAOHomeWithUnLoginQuery($id: String!) {
  dao(id: $id) {
    datum {
      id
      number
      name
      desc
      logo
      ownerId
      createAt
      updateAt
      tokenAddress
      tokenName
      tokenSymbol
    }
    cycles(filter: [un_vote_end]) {
      nodes {
        datum {
          id
          beginAt
          endAt
          voteBeginAt
          voteEndAt
        }
      }
    }
    following {
      total
    }
  }
}

query DAOTokenConfig($daoId: String!) {
  daoTokenConfig(daoId: $daoId) {
    ethDaoId
  }
}

query DAOFollowInfo($id: String!, $userId: String!) {
  dao(id: $id) {
    datum {
      id
      number
      name
      desc
      logo
      ownerId
      createAt
      updateAt
    }
    following {
      total
      followers(userId: $userId) {
        createAt
      }
    }
  }
}

query DAOList($filter: DAOsFilterEnum, $sorted: DAOsSortedEnum, $sortedType: DAOsSortedTypeEnum, $search: String, $first: Int, $offset: Int) {
  daos(filter: $filter, sorted: $sorted, sortedType: $sortedType, search: $search, offset: $offset, first: $first){
    dao{
      datum{
        createAt
        desc
        id
        logo
        name
        ownerId
        updateAt
      }
      stat{
        following
        job
        size
        token
      }
      isFollowing
      isOwner
    }
    stat{
      icpper
      size
      income
    }
    total
  }
}

query UserJobDAOList($userName: String) {
  daos(filter: member, offset: 0, first: 100, userName: $userName) {
    dao {
      datum {
        id
        name
        createAt
        githubOwnerId
        githubOwnerName
        number
        ownerId
        updateAt
        tokenSymbol
      }
    }
  }
}

query DAOGithubAppStatus($name: String!) {
  daoGithubAppStatus(name: $name) {
    githubAppName
    githubOrgId
    isExists
    isGithubOrgOwner
    isIcpAppInstalled
  }
}

query JobList($beginTime: Int, $endTime: Int, $daoName: String!, $first: Int, $offset: Int, $sorted: JobSortedEnum, $sortedType: SortedTypeEnum, $userName: String) {
  jobs(beginTime: $beginTime, daoName: $daoName, endTime: $endTime, first: $first, offset: $offset, sorted: $sorted, sortedType: $sortedType, userName: $userName) {
    job {
      node {
        id
        title
        size
        status
        githubRepoOwner
        githubRepoName
        githubIssueNumber
        income
        hadAutoCreatePr
      }
      prs {
        id
        title
        githubRepoOwner
        githubRepoName
        githubPrNumber
        isAutoCreatePr
        githubPrId
      }
    }
    stat {
      size
      tokenCount
      tokenName
    }
    total
  }
}

query IssueInfo($daoName: String!, $parameter: [String]) {
  openGithub(daoName: $daoName, way: ISSUE_INFO, parameter: $parameter) {
    way
    data
  }
}

query UserOpenPR($daoName: String!, $parameter: [String]) {
  openGithub(daoName: $daoName, way: OPEN_PR, parameter: $parameter) {
    way
    data
  }
}

query IssueTimeline($daoName: String!, $parameter: [String]) {
  openGithub(daoName: $daoName, way: ISSUE_TIMELINE, parameter: $parameter) {
    way
    data
  }
}

query CycleJobList($cycleId: String!, $first: Int, $offset: Int, $pairType: JobsQueryPairTypeEnum, $sorted: JobsQuerySortedEnum, $sortedType: JobsQuerySortedTypeEnum) {
  cycle(id: $cycleId) {
    jobs(
      first: $first,
      offset: $offset,
      pairType: $pairType,
      sorted: $sorted,
      sortedType: $sortedType) {
      nodes {
        datum {
          id
          githubRepoOwner
          githubRepoName
          githubIssueNumber
          title
          size
          income
          pairType
        }
        user {
          id
          avatar
          nickname
          githubLogin
        }
      }
      total
    }
  }
}


query CycleIcpperList($cycleId: String!, $first: Int, $offset: Int, $sorted: CycleIcpperStatSortedEnum, $sortedType: CycleIcpperStatSortedTypeEnum) {
  cycle(id: $cycleId) {
    icpperStats(
      first: $first,
      offset: $offset,
      sorted: $sorted,
      sortedType: $sortedType) {
      nodes {
        datum {
          id
          jobCount
          size
          income
          ei
          beDeductedSizeByReview
          haveTwoTimesLt04
          haveTwoTimesLt08
          unVotedAllVote
        }
        icpper {
          id
          avatar
          nickname
          githubLogin
        }
        lastEi
        beReviewerHasWarningUsers {
          id
          nickname
        }
      }
      total
    }
  }
}


query OwnerCycleIcpperList($cycleId: String!, $first: Int, $offset: Int, $sorted: CycleIcpperStatSortedEnum, $sortedType: CycleIcpperStatSortedTypeEnum) {
  cycle(id: $cycleId) {
    icpperStats(
      first: $first,
      offset: $offset,
      sorted: $sorted,
      sortedType: $sortedType) {
      nodes {
        datum {
          id
          jobCount
          size
          income
          ei
          ownerEi
          voteEi
          beDeductedSizeByReview
          haveTwoTimesLt04
          haveTwoTimesLt08
          unVotedAllVote
        }
        icpper {
          id
          avatar
          nickname
          githubLogin
        }
        lastEi
        beReviewerHasWarningUsers {
          id
          nickname
        }
      }
      total
    }
  }
}

query CycleVoteList($cycleId: String!, $first: Int, $offset: Int, $isMyself: Boolean, $isPublic: Boolean) {
  cycle(id: $cycleId) {
    datum {
      beginAt
      endAt
      voteBeginAt
      voteEndAt
    }
    votes(first: $first, offset: $offset, isMyself: $isMyself, isPublic: $isPublic) {
      total
      nodes {
        datum {
          id
          isResultPublic
          voteJobId
          voteResultStatTypeAll
          voteType
          voterId
        }
        leftJob {
          datum {
            title
            githubRepoOwner
            githubRepoName
            githubIssueNumber
            size
            pairType
            id
          }
          user {
            id
            githubLogin
            nickname
          }
        }
        rightJob {
          datum {
            title
            githubRepoOwner
            githubRepoName
            githubIssueNumber
            pairType
            size
            id
          }
          user {
            id
            githubLogin
            nickname
          }
        }
        voteJob {
          datum {
            id
          }
        }
        voter {
          id
          githubLogin
          nickname
        }
      }
    }
  }
}

query DAOCycle($daoId: String!) {
  dao(id: $daoId) {
    cycles {
      nodes {
        datum {
          id
          timeZone
          beginAt
          endAt
          pairBeginAt
          pairEndAt
          voteBeginAt
          voteEndAt
          pairedAt
          voteResultPublishedAt
          voteResultStatAt
        }
      }
    }
  }
}

query CycleStatData($cycleId: String!) {
  cycle(id: $cycleId) {
    stat {
      icpperCount
      jobCount
      size
      income
    }
  }
}

query CyclePairStatus($cycleId: String!) {
  cycle(id: $cycleId) {
    pairTask {
      status
    }
  }
}

query CycleVoteResultStatus($cycleId: String!) {
  cycle(id: $cycleId) {
    voteResultStatTask {
      status
    }
  }
}

query CyclePublishStatus($cycleId: String!) {
  cycle(id: $cycleId) {
    voteResultPublishTask {
      status
    }
  }
}

query DAOVotingCycle($daoId: String!) {
  dao(id: $daoId) {
    cycles(filter: voting) {
      nodes {
        datum {
          id
          beginAt
          endAt
          voteBeginAt
          voteEndAt
        }
      }
    }
  }
}

query DAOProcessingCycle($daoId: String!) {
  dao(id: $daoId) {
    cycles(filter: processing) {
      nodes {
        datum {
          id
          beginAt
          endAt
        }
      }
    }
  }
}

query DAOCycleVoteList($cycleId: String!, $first: Int, $offset: Int) {
  cycle(id: $cycleId) {
    datum {
      beginAt
      endAt
      voteBeginAt
      voteEndAt
    }
    votes(first: $first, offset: $offset, isMyself: true) {
      total
      confirm
      nodes {
        datum {
          id
          isResultPublic
          voteJobId
          voteResultStatTypeAll
          voteType
          voterId
        }
        leftJob {
          datum {
            title
            githubRepoOwner
            githubRepoName
            githubIssueNumber
            size
            pairType
            id
          }
          user {
            id
            githubLogin
            nickname
          }
        }
        rightJob {
          datum {
            title
            githubRepoOwner
            githubRepoName
            githubIssueNumber
            pairType
            size
            id
          }
          user {
            id
            githubLogin
            nickname
          }
        }
        voteJob {
          datum {
            id
          }
        }
        voter {
          id
          githubLogin
          nickname
        }
        selfVoteResultTypeAll
      }
    }
  }
}

query UserCycleIcpperStatList($daoName: String!, $userName: String!, $first: Int!, $offset: Int!) {
  icpperStats(daoName: $daoName, userName: $userName, first: $first, offset: $offset) {
    nodes {
      datum {
        id
        jobCount
        size
        income
        ei
        beDeductedSizeByReview
        haveTwoTimesLt04
        haveTwoTimesLt08
        unVotedAllVote
      }
      cycle {
        id
        timeZone
        beginAt
        endAt
        pairBeginAt
        pairEndAt
        voteBeginAt
        voteEndAt
        pairedAt
        voteResultPublishedAt
        createAt
        updateAt
      }
      icpper {
        id
        avatar
        nickname
        githubLogin
      }
      lastEi
      beReviewerHasWarningUsers {
        id
        nickname
      }
    }
    total
  }
}

query CyclesByTokenUnreleasedList($lastTimestamp: Int!) {
  cyclesByTokenUnreleased(lastTimestamp: $lastTimestamp) {
    nodes {
      datum {
        id
        daoId
        timeZone
        beginAt
        endAt
        voteResultPublishedAt
      }
      icpperStats {
        nodes {
          datum {
            cycleId
            jobSize
            size
          }
          icpper {
            id
            githubLogin
            nickname
            erc20Address
          }
        }
      }
    }
  }
}

query DAOTokenMintSplitInfo($daoId: String!, $startCycleId: String!, $endCycleId: String!) {
  dao(id: $daoId) {
    tokenMintSplitInfo(startCycleId: $startCycleId, endCycleId: $endCycleId) {
      splitInfos {
        userId
        userNickname
        userGithubLogin
        userAvatar
        userErc20Address
        ratio
      }
    }
  }
}

query DAOTokenMintRecords($daoId: String!, $tokenContractAddress: String!, $chainId: String!, $first: Int!, $offset: Int!) {
  dao(id: $daoId) {
    tokenMintRecords(tokenContractAddress: $tokenContractAddress, chainId: $chainId, first: $first, offset: $offset) {
      nodes {
        datum {
          id
          daoId
          tokenContractAddress
          status
          totalRealSize
          createAt
          updateAt
        }
      }
    }
  }
}

query DAOTokenMintRunning($daoId: String!, $tokenContractAddress: String!, $chainId: String!) {
  dao(id: $daoId) {
    tokenMintRecords(tokenContractAddress: $tokenContractAddress, chainId: $chainId, status: [INIT, PENDING]) {
      nodes {
        datum {
          id
          daoId
          tokenContractAddress
          status
          totalRealSize
          createAt
          updateAt
        }
      }
    }
  }
}

query DAOIcppers($daoId: String!, $sorted: IcppersQuerySortedEnum!, $sortedType: IcppersQuerySortedTypeEnum!, $first: Int!, $offset: Int!) {
  dao(id: $daoId) {
    icppers(sorted: $sorted, sortedType: $sortedType, first: $first, offset: $offset) {
      nodes {
        user {
          id
          githubLogin
          nickname
        }
        jobCount
        size
        income
        joinTime
      }
      stat {
        icpperCount
        jobCount
        size
        income
      }
      total
    }
  }
}

query DAOJobs($daoId: String!, $sorted: JobsQuerySortedEnum!, $sortedType: JobsQuerySortedTypeEnum!, $first: Int!, $offset: Int!) {
  dao(id: $daoId) {
    jobs(sorted: $sorted, sortedType: $sortedType, first: $first, offset: $offset) {
      nodes {
        datum {
          id
          title
          size
          status
          githubRepoOwner
          githubRepoName
          githubIssueNumber
          income
        }
        user {
          id
          githubLogin
          nickname
        }
      }
      stat {
        icpperCount
        jobCount
        size
        income
      }
      total
    }
  }
}

query UserVotingCycle {
  votingCycle{
    datum{
      id
      daoId
    }
  }
}

query HomeStatsQuery {
  stats {
    dao
    icpper
    size
    income
  }
}
