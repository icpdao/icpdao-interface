mutation CreateDAO($name: String!, $desc: String!, $logo: String!, $timeZone: Int!, $timeZoneRegion: String!) {
  createDao(name: $name, desc: $desc, logo: $logo, timeZone: $timeZone, timeZoneRegion: $timeZoneRegion) {
    dao {
      id
      number
      createAt
    }
  }
}

mutation UpdateDAOJobConfig(
  $daoId: String!
  $deadlineDay: Int
  $deadlineTime: Int
  $pairBeginDay: Int
  $pairBeginHour: Int
  $pairEndDay: Int
  $pairEndHour: Int
  $votingBeginDay: Int
  $votingBeginHour: Int
  $votingEndDay: Int
  $votingEndHour: Int
  $timeZoneRegion: String
  $timeZone: Int
) {
  updateDaoJobConfig(
    daoId: $daoId,
    deadlineDay: $deadlineDay,
    deadlineTime: $deadlineTime,
    pairBeginDay: $pairBeginDay,
    pairBeginHour: $pairBeginHour,
    pairEndDay: $pairEndDay,
    pairEndHour: $pairEndHour,
    votingBeginDay: $votingBeginDay,
    votingBeginHour: $votingBeginHour,
    votingEndDay: $votingEndDay,
    votingEndHour: $votingEndHour,
    timeZone: $timeZone,
    timeZoneRegion: $timeZoneRegion
  ) {
    ok
  }
}

mutation FollowDAO($daoId: String!, $followType: DAOFollowTypeEnum!) {
  updateDaoFollow(daoId: $daoId, type: $followType) {
    ok
  }
}

mutation UpdateDAOBaseInfo($id: String!, $desc: String, $logo: String, $tokenAddress: String, $tokenName: String, $tokenSymbol: String) {
  updateDaoBaseInfo(id: $id, desc: $desc, logo: $logo, tokenAddress: $tokenAddress, tokenName: $tokenName, tokenSymbol: $tokenSymbol) {
    dao {
      updateAt
    }
  }
}

mutation CreateJob($issueLink: String!, $size: Float!) {
  createJob(issueLink: $issueLink, size: $size) {
    job {
      node {
        id
        daoId
        githubRepoOwner
      }
    }
  }
}

mutation UpdateJobSize($id: String!, $size: Float!) {
  updateJob(id: $id, size: $size) {
    job {
      node {
        id
      }
    }
  }
}

mutation DeleteJob($id: String!) {
  deleteJob(id: $id) {
    ok
  }
}

mutation UpdateCycleJobVoteTypeByOwner($jobId: String!, $voteType: UpdateJobVoteTypeByOwnerArgumentPairTypeEnum) {
  updateJobVoteTypeByOwner(id: $jobId, voteType: $voteType) {
    ok
  }
}

mutation AddJobPR($id: String!, $addPr: String!) {
  updateJob(id: $id, addPr: $addPr) {
    job {
      node {
        id
      }
      prs {
        id
        title
        githubRepoOwner
        githubRepoName
        githubPrNumber
      }
    }
  }
}

mutation DeleteJobPR($id: String!, $deletePr: String!) {
  updateJob(id: $id, deletePr: $deletePr) {
    job {
      node {
        id
      }
      prs {
        id
        title
        githubRepoOwner
        githubRepoName
        githubPrNumber
      }
    }
  }
}

mutation UpdateAllVote($voteId: String!, $vote: Boolean!) {
  updateAllVote(id: $voteId, vote: $vote) {
    ok
  }
}

mutation UpdatePairVote($voteId: String!, $voteJobId: String!) {
  updatePairVote(id: $voteId, voteJobId: $voteJobId) {
    ok
  }
}

mutation UpdateOwnerEI($statId: String!, $ownerEi: Decimal!) {
  updateIcpperStatOwnerEi(id: $statId, ownerEi: $ownerEi) {
    ei
    ownerEi
    voteEi
  }
}

mutation BeginCyclePairTask($cycleId: String!) {
  createCycleVotePairTaskByOwner(cycleId: $cycleId) {
    status
  }
}

mutation BeginCycleVoteResultTask($cycleId: String!) {
  createCycleVoteResultStatTaskByOwner(cycleId: $cycleId) {
    status
  }
}

mutation BeginPublishCycleTask($cycleId: String!) {
  createCycleVoteResultPublishTaskByOwner(cycleId: $cycleId) {
    status
  }
}

mutation UpdateVotePairPublic($voteId: String!, $isPublic: Boolean!) {
  changeVoteResultPublic(id: $voteId, public: $isPublic) {
    ok
  }
}

mutation MarkCyclesTokenReleased($daoId: String!, $cycleIds: [String]!, $unitSizeValue: String!) {
  markCyclesTokenReleased(daoId: $daoId, cycleIds: $cycleIds, unitSizeValue: $unitSizeValue) {
    ok
  }
}

mutation UpdateVoteConfirm($cycleId: String!, $signatureAddress: String!, $signatureMsg: String!, $signature: String!) {
  updateVoteConfirm(cycleId: $cycleId, signatureAddress: $signatureAddress, signatureMsg: $signatureMsg, signature: $signature) {
    ok
  }
}
